Execution;Time in ms in Scope #194 of NHPPTenant_model(0);Invocations in Scope #194 of NHPPTenant_model(0);Time in ms in Scope #192 of Benchmarking(0);Invocations in Scope #192 of Benchmarking(0);Time in ms in Scope #190 (in ExperimentPlan);Invocations in Scope #190 (in ExperimentPlan)
model NHPPTenant

global ;;;;;;
list<NHPPTenant_model> peers ;0;1;;;;
-199;;;;;;
experiment host ;0;1;;;;
-29;;;;;;
NHPPTenant_model world ;0;1;;;;
-27;;;;;;
experiment experiment ;0;1;;;;
-31;;;;;;
float step <- 1 * #minute ;0;1;;;;
1 * #minute;0;1;;;;
int T <- 1380 ;0;1;;;;
list events ;0;1;;;;
list trash_list ;0;1;;;;
list<NHPP_function> NHPP_function ;0;1;;;;
species NHPP_function ;1811;122821;;;;
list<NHPP_function> peers ;0;1;;;;
-199;;;;;;
NHPPTenant_model host ;0;1;;;;
-29;;;;;;
float base_rate <- 0.003083 ;0;1;;;;
float amp1 <- 0.014778 ;0;1;;;;
float center1 <- 690.0 ;0;1;;;;
float amp2 <- 0.021514 ;0;1;;;;
float center2 <- 870.0 ;0;1;;;;
int fixed_width <- 60 ;0;1;;;;
float lambda_max <- max([amp1,amp2]) ;0;1;;;;
max([amp1,amp2]);0;1;;;;
[amp1,amp2];0;1;;;;
float mean_trash_amount <- 0.3 ;0;1;;;;
float sd_trash_amount <- 0.05 ;0;1;;;;
float trash_amount ;0;1;;;;
list<float> intensity_values <- [] ;0;1;;;;
[];0;1;;;;
float lambda_t (float t);1133;248490;;;;
arg t type: float ;5;248490;;;;
let intensity type: float ;9;248490;;;;
set intensity value: intensity + base_rate ;61;248490;;;;
intensity + base_rate;23;248490;;;;
set intensity value: intensity + (amp1 * exp((-1 * ((t - center1) ^ 2)) / ((2 * fixed_width) ^ 2))) ;425;248490;;;;
intensity + (amp1 * exp((-1 * ((t - center1) ^ 2)) / ((2 * fixed_width) ^ 2)));375;248490;;;;
amp1 * exp((-1 * ((t - center1) ^ 2)) / ((2 * fixed_width) ^ 2));334;248490;;;;
exp((-1 * ((t - center1) ^ 2)) / ((2 * fixed_width) ^ 2));297;248490;;;;
(-1 * ((t - center1) ^ 2)) / ((2 * fixed_width) ^ 2);251;248490;;;;
-1 * ((t - center1) ^ 2);129;248490;;;;
-1;7;248490;;;;
(t - center1) ^ 2;61;248490;;;;
t - center1;27;248490;;;;
(2 * fixed_width) ^ 2;60;248490;;;;
2 * fixed_width;19;248490;;;;
set intensity value: intensity + (amp2 * exp((-1 * ((t - center2) ^ 2)) / ((2 * fixed_width) ^ 2))) ;392;248490;;;;
intensity + (amp2 * exp((-1 * ((t - center2) ^ 2)) / ((2 * fixed_width) ^ 2)));361;248490;;;;
amp2 * exp((-1 * ((t - center2) ^ 2)) / ((2 * fixed_width) ^ 2));329;248490;;;;
exp((-1 * ((t - center2) ^ 2)) / ((2 * fixed_width) ^ 2));283;248490;;;;
(-1 * ((t - center2) ^ 2)) / ((2 * fixed_width) ^ 2);243;248490;;;;
-1 * ((t - center2) ^ 2);123;248490;;;;
-1;7;248490;;;;
(t - center2) ^ 2;61;248490;;;;
t - center2;25;248490;;;;
(2 * fixed_width) ^ 2;56;248490;;;;
2 * fixed_width;17;248490;;;;
return intensity ;11;248490;;;;
reflex generate_nhpp when: mod(cycle,T) = 0 ;1753;122821;;;;
mod(cycle,T) = 0;56;122821;;;;
mod(cycle,T);23;122821;;;;
set intensity_values value: [] ;2;90;;;;
[];2;90;;;;
set events value: [] ;0;90;;;;
[];0;90;;;;
set trash_list value: [] ;0;90;;;;
[];0;90;;;;
let y type: int value: cycle ;0;90;;;;
write 'Cycle number: ' + y ;6;90;;;;
'Cycle number: ' + y;0;90;;;;
let t type: float value: 0.0 ;0;90;;;;
loop while: (t < T) and (cycle < (y + T)) ;946;90;;;;
(t < T) and (cycle < (y + T));83;124290;;;;
t < T;23;124290;;;;
cycle < (y + T);31;124200;;;;
y + T;10;124200;;;;
set t value: t + 1 ;26;124200;;;;
t + 1;8;124200;;;;
let candidate type: float value: rnd(0.0,1.0) ;28;124200;;;;
rnd(0.0,1.0);9;124200;;;;
let acceptance_prob type: float value: (self.lambda_t(t:t)) / lambda_max ;659;124200;;;;
(self.lambda_t(t:t)) / lambda_max;633;124200;;;;
self.lambda_t(t:t);;;;;;
if candidate <= acceptance_prob ;82;124200;;;;
candidate <= acceptance_prob;7;124200;;;;
set events value: events + t ;19;47671;;;;
events + t;7;47671;;;;
set trash_amount value: gauss(mean_trash_amount,sd_trash_amount) ;6;47671;;;;
gauss(mean_trash_amount,sd_trash_amount);2;47671;;;;
set trash_list value: trash_list + trash_amount ;10;47671;;;;
trash_list + trash_amount;7;47671;;;;
loop i from: 0.0 step: 1.0 to: T ;692;90;;;;
set intensity_values value: intensity_values + (self.lambda_t(t:i)) ;665;124290;;;;
intensity_values + (self.lambda_t(t:i));646;124290;;;;
self.lambda_t(t:i);;;;;;
write (('Cumulative trash events on day ' + int(cycle / T)) + ': ') + length(events) ;13;90;;;;
(('Cumulative trash events on day ' + int(cycle / T)) + ': ') + length(events);1;90;;;;
('Cumulative trash events on day ' + int(cycle / T)) + ': ';0;90;;;;
'Cumulative trash events on day ' + int(cycle / T);0;90;;;;
int(cycle / T);0;90;;;;
cycle / T;0;90;;;;
length(events);1;90;;;;
write 'Day ended at t= ' + t ;3;90;;;;
'Day ended at t= ' + t;0;90;;;;
return (events + intensity_values) + trash_amount ;11;90;;;;
(events + intensity_values) + trash_amount;11;90;;;;
events + intensity_values;11;90;;;;
init ;0;1;;;;
create NHPP_function ;0;1;;;;
experiment 'Benchmarking' type: 'gui' title: 'Experiment Benchmarking' benchmark: true ;;;;;;
list<Benchmarking> peers ;;;;;0;1
-199;;;;;;
NHPPTenant_model host ;;;;;1;1
-29;;;;;;
list<NHPPTenant_model> simulations ;;;;;0;1
-27;;;;;;
NHPPTenant_model simulation ;;;;;0;1
-27;;;;;;
