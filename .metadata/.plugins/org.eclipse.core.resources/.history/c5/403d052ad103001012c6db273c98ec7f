/**
* Name: PedestrianToBin
* Based on the internal empty template. 
* Author: valencia
* Tags: 
*/


model PedestrianToBin

/* Insert your model definition here */



global {
	file wall_shapefile <- file("../includes/walls.shp");
	
	shape_file free_spaces_shape_file <- shape_file("../includes/free spaces.shp");
	shape_file open_area_shape_file <- shape_file("../includes/open area.shp");
	shape_file pedestrian_paths_shape_file <- shape_file("../includes/pedestrian paths.shp");
	
    // Parameters for pedestrian movement
    bool display_force <- false parameter: true;
    bool display_target <- false parameter: true;
    bool display_circle_min_dist <- true parameter: true;
    
    float P_shoulder_length <- 0.45 parameter: true;
    float P_proba_detour <- 0.5 parameter: true;
    bool P_avoid_other <- true parameter: true;
    float P_obstacle_consideration_distance <- 3.0 parameter: true;
    float P_pedestrian_consideration_distance <- 3.0 parameter: true;
    float P_tolerance_target <- 0.1 parameter: true;
    bool P_use_geometry_target <- true parameter: true;
    
    string P_model_type <- "simple";
    
    float P_n_prime_SFM_simple parameter: true <- 3.0 category: "SFM simple" ;
	float P_n_SFM_simple parameter: true <- 2.0 category: "SFM simple" ;
	float P_lambda_SFM_simple <- 2.0 parameter: true category: "SFM simple" ;
	float P_gama_SFM_simple parameter: true <- 0.35 category: "SFM simple" ;
	float P_relaxion_SFM_simple parameter: true <- 0.54 category: "SFM simple" ;
	float P_A_pedestrian_SFM_simple parameter: true <-4.5category: "SFM simple" ;
    
   	// set number of tenants
    int nbr_people <- 10;
    
    // 11 tenant locations
    list <point> tenant_locations <- [{30,13,0},{38,13,0},{49,13,0},{60,13,0},{63,30,0},{48,30,0},{28,30,0},{34,30,0},{34,50,0},{60,50,0}];
    
    // set each step to be 1 minute
    float step <- 1.0 #mn;
    
    //set the date
	date starting_date <- date([2025,1,1,0,0,0]); // 1 Jan 2025, at 00:00:00
    
    
    // set display text size
    int displayTextSize <-2;
    
//    // Number of obstacles
//    int nb_obstacles <- 20 parameter: true;
    
    // Space where agents can move
    geometry free_space <- copy(shape);
    geometry shape <- envelope(wall_shapefile);
    
    // Graph for navigation
    graph pedestrian_network;
        
    
    init {
    	free_space <- first(open_area_shape_file.contents);
    	
    
    	
        // Create obstacles
        create obstacle from: wall_shapefile;
        
        // Create pedestrian paths 
        create pedestrian_path from: pedestrian_paths_shape_file {
			list<geometry> fs <- free_spaces_shape_file overlapping self;
			free_space <- fs first_with (each covers shape); //for all free spaces intersecting pedestrian path, 
			//add to list of geometry and call that list 'fs'. find the first in that list that 
			//COMPLETLY avoids wall (within envelope(wall)), make it free space
		}
		

		pedestrian_network <- as_edge_graph(pedestrian_path);
		
		ask pedestrian_path {
			do build_intersection_areas pedestrian_graph: pedestrian_network;
		}
		
		write free_space.points;
		
		//create central rubbish bin agent
		create central_bin{
			location <- {10,3,0};
//			location <- free_space.points at 6 - {2,0,0};
		}
	
        // Create a bin at a random location
        // assume all bins start at 0 capacity
        create bin {
        	bin_index <- 1;
            location <- free_space.points at 1 - {-bin_width,bin_width};
            current_capacity <- 0.0;
            ask central_bin{
            	myself.distance_to_central_bin <- self.location distance_to myself.location;
            }
        }
        
        create bin {
        	bin_index <- 2;
            location <- free_space.points at 2 - {0,bin_width};
            current_capacity <- 0.0;
            ask central_bin{
            	myself.distance_to_central_bin <- self.location distance_to myself.location;

            }
        }
        
        create bin  {
        	bin_index <- 3;
            location <- free_space.points at 3 - {bin_width,bin_width};
            current_capacity <- 0.0;
            ask central_bin{
            	myself.distance_to_central_bin <- self.location distance_to myself.location;
            }
        }
        
        create bin  {
        	bin_index <- 4;
            location <- free_space.points at 4 - {bin_width,0};
            current_capacity <- 0.0;
            ask central_bin{
            	myself.distance_to_central_bin <- self.location distance_to myself.location;
            }
        }
        
        create bin  {
        	bin_index <- 5;
            location <- free_space.points at 5 - {bin_width,-bin_width};
            current_capacity <- 0.0;
            ask central_bin{
            	myself.distance_to_central_bin <- self.location distance_to myself.location;
            }
            
        }
        
        
        // create cleaner agent
        create cleaner{
        	location <- {3,22,0};
			is_cleaning <- false;
			trash_on_hand <- 0.0;
			max_trash_capacity <- 1200.0;
			resting_location <- location;
			

           
        }

        
        loop i from: 0 to: nbr_people-1{
        	create people{
        		location <- one_of(tenant_locations);
        		tenant_locations <- tenant_locations - location;
        		has_trash <- false;
        		trash_on_hand<- 0.0;
            	home_base <- location;
            	trash_generation_lambda <- rnd(0.3, 1.0);
            	
            
	            // Set pedestrian parameters
	            obstacle_consideration_distance <- P_obstacle_consideration_distance;
	            pedestrian_consideration_distance <- P_pedestrian_consideration_distance;
	            shoulder_length <- P_shoulder_length;
	            avoid_other <- P_avoid_other;
	            proba_detour <- P_proba_detour;
	            
	            use_geometry_waypoint <- P_use_geometry_target;
	            tolerance_waypoint <- P_tolerance_target;
	            pedestrian_species <- [people];
	            obstacle_species <- [obstacle];
	            
	            A_pedestrians_SFM <- P_A_pedestrian_SFM_simple;
				relaxion_SFM <- P_relaxion_SFM_simple;
				gama_SFM <- P_gama_SFM_simple;
				lambda_SFM <- P_lambda_SFM_simple;
				n_prime_SFM <- P_n_prime_SFM_simple;
				n_SFM <- P_n_SFM_simple;
            
            }
           
        }
    }
    
//    // Pause simulation when all people have reached their targets
//    reflex check_end when: empty(people where each.has_trash) {
//        write "All people have disposed of their trash!";
//        do pause;
//    }
}

// Create central rubbish bin agent
species central_bin{
	
	aspect default {
		draw square(4) color: #yellow depth: 4;
	}
	
}

// Species for pedestrian paths
species pedestrian_path skills: [pedestrian_road] {
    aspect default {
        draw shape color: #gray;
    }
}

// Species for obstacles
species obstacle {
	aspect default {
		draw shape + (P_shoulder_length/2.0) color: #gray border: #black;
	}
}

// Species for trash bins
species bin {
	rgb bin_color <- #green;
	int bin_index;
	int max_capacity <- 300;
	float current_capacity <- 0.0;
	// Statuses: Empty, Filling, ReadyToClear, Full
	string current_status <- "Empty";
	float clearing_capacity <- 0.6*max_capacity;
	float distance_to_central_bin;
	float current_distance_to_cleaner <- 0.0;
	int bin_width <- 2;
	
	reflex check_bin_trash_level{
		

		
		if (current_capacity > 0.0 and current_capacity < clearing_capacity){
			current_status <- "Filling";
			bin_color <- #green;
		}
		
		// set different colours of bins based on threshold
		if (current_capacity >= clearing_capacity and current_capacity < max_capacity){
			bin_color <- #orange;
			current_status <- "ReadyToClear";
		}
		
		else if (current_capacity >= max_capacity){
			bin_color <- #red;
			current_status <- "Full"; // means fail already
		}
		
	}
	
    aspect default {
        draw square(bin_width) color: bin_color depth: bin_width;
		draw ("Bin " + bin_index) color:#black size:displayTextSize at:{location.x-bin_width,location.y+bin_width+displayTextSize} perspective:false;
		draw ("Fill Level: " + int((current_capacity / max_capacity) * 10000)/100 + " %") color:#black size:displayTextSize at:{location.x-bin_width,location.y+bin_width+displayTextSize*1.5} perspective:false; 
        draw ("Status: " + current_status) color:#black size:(displayTextSize) at:{location.x-bin_width,location.y+bin_width+displayTextSize*2} perspective:false;
    
    }
}

species cleaner skills:[pedestrian]{
	bool is_cleaning <- false;
	float trash_on_hand;
	float max_trash_capacity;
	point current_target;
	bin bin_to_clean;
	list<bin> readyBins <- [];
	list<bin> bins_to_clean_order;
	int readyCount;
	point resting_location;
	float speed <- 0.05 #km/#h;
    bool return_to_rest <- false;
    point central_bin_location;
 

//	reflex add_bins_to_activated_list when: every(20#cycle){
	reflex add_bins_to_activated_list{
		
//		//write the time per step
//		write "CURRENT DATE: " + current_date;
		
		
		ask agents of_species bin{
			
	 		// for each bin
	 		if (self.current_status = "ReadyToClear" or self.current_status = "Full"){
	 			// idk why there isn't a "does not contain" lol
	 			if (myself.readyBins contains self = false){
	 				myself.readyBins <- myself.readyBins + self;
	 				
	 			}
	 		}
	 	}	 
	 	   
	 	write "Ready bin count: " + readyCount;
	 	
	 }
	 
	// when cleaner is at rest or when cleaner has just finished cleaning 3 bins
	reflex CheckIfActivated when: is_cleaning = false and return_to_rest = false and every(20#cycle){
		
	    readyCount <- length(readyBins);
	   
	        if (readyCount >= 3) {
	        	
	        	write "readyBin List: " + readyBins; 
	        	
	        	loop ready_bin_list_index from: 0 to: 2 { 
	        		// add first 4 bins into bins_to_clean_order
				    bins_to_clean_order <- bins_to_clean_order + (readyBins at ready_bin_list_index);
				}
								
	        	
	        	// sort bins to clean by distance to the central bin
	        	bins_to_clean_order <- bins_to_clean_order sort_by (each.distance_to_central_bin);
	        	write "Order to clear the current 4 bins: " + bins_to_clean_order;
	        	   	
	            is_cleaning <- true;
                write "Cleaner activated! Cleaning bins..." ;
	            
	            
	            }
	           // if cleaner is not at resting position, return to rest
	        else if (readyCount < 3) and (location != resting_location) and (return_to_rest = false){
	        	return_to_rest <- true;
	        	write "Cleaner is returning to rest...";
	        }
	}
	
	action get_central_bin_location{
		ask central_bin{
			myself.central_bin_location <- self.location;
		}
	}       
	            
	reflex clean_bins when: is_cleaning = true and return_to_rest = false {
		
        
        if (length(bins_to_clean_order) > 0 and location distance_to (bins_to_clean_order at 0) > 0.1){
        	bin_to_clean <- bins_to_clean_order at 0;
//			write "Cleaning " + bin_to_clean + "now!";
        	do goto (target:bin_to_clean, on:pedestrian_network);
        }
        
        // once first bin in the list has been reached
        else if (length(bins_to_clean_order) > 0){
        	// increase trash on hand
			trash_on_hand <- trash_on_hand + bin_to_clean.current_capacity;
        	bin_to_clean.current_capacity <- 0.0;
			bin_to_clean.current_status <- "Empty";
			write "Finished clearing" + bin_to_clean;
			//remove bin from readyBins so that bin can start filling again while cleaner is cleaning other bins
			remove item: bin_to_clean from:readyBins;
        	remove item: bin_to_clean from:bins_to_clean_order;
        	
        	if (length(bins_to_clean_order) > 0){
	        	ask bin {
	        		self.current_distance_to_cleaner <- myself.location distance_to self.location;
	        	}
	        	bins_to_clean_order <- bins_to_clean_order sort_by (each.current_distance_to_cleaner);
        	}
        }
        
        //once done with the last bin
        else{
//        	// increase trash on hand
//			trash_on_hand <- trash_on_hand + bin_to_clean.current_capacity;
//        	bin_to_clean.current_capacity <- 0.0;
//			bin_to_clean.current_status <- "Empty";
//			write "Finished clearing" + bin_to_clean;
//			//remove bin from readyBins so that bin can start filling again while cleaner is cleaning other bins
//			write "BEFORE removal" + readyBins + "and" + bins_to_clean_order;
//			remove item: bin_to_clean from:readyBins;
//        	remove item: bin_to_clean from:bins_to_clean_order; // should now be empty
//			write "AFTER removal" + readyBins + "and" + bins_to_clean_order;

			// go to central trash bin to throw trash
			if central_bin_location = nil{
					do get_central_bin_location;
				}
				
        	if location distance_to central_bin_location > 0.1{
					do goto (target:central_bin_location, on:pedestrian_network);
				}

			// to let first reflex function run
			else{
				trash_on_hand <- 0.0;
        		is_cleaning <- false;
        	}
        }
	}
	          
	            
	
	            
	reflex return_to_rest_process when: return_to_rest = true {
				
		if location distance_to resting_location > 0.1{
			do goto (target:resting_location, on:pedestrian_network);
		}
				
		else{
			write "Cleaner has started rest.";
			return_to_rest <- false;
		}
		

	}
	            
	
	
	aspect default {
		
        draw circle(1.5) color: is_cleaning ? #green : #gray depth: 0.5;
        draw ("Trash on hand: " + trash_on_hand) color:#black size:(displayTextSize) at:{location.x,location.y+(displayTextSize)} perspective:false;

        
    }
}


// Species for people with pedestrian skill
species people skills: [pedestrian] {
	float trash_generation_lambda;
	float trash_on_hand;
    bool has_trash;
    int minimum_trash_level_to_throw <- 40;
    rgb color <- rnd_color(255);
    float speed <- 0.05 #km/#h;
    bin target_bin;
    point current_target;
    point home_base;

    // Find target bin if none is set and if the agent has trash
    action search_target {
        ask bin closest_to self {
            myself.target_bin <- self;
            myself.current_target <- self.location;
        }
    }

    
    // generate trash based on specific multiplier
//    reflex generate_trash when: self.location = home_base and has_trash = false and every(5#cycle) {
    reflex generate_trash when: self.location = home_base and has_trash = false {
    	
    	
    	if (trash_on_hand >= minimum_trash_level_to_throw){
        	has_trash <- true;
        	do search_target;
        }
        else{
    		trash_on_hand <- trash_on_hand + float(poisson(trash_generation_lambda));
    	}
    }
    
    
    reflex move when: current_target != nil {
    	//in tenant store chilling
    	if not has_trash and current_target = home_base{
    		if self.location distance_to home_base < 0.1 {
	            current_target <- nil;
//	            write name + " has reached home! Time to make trash...";
	        }
        //go back to store
        else{
           do goto (target: home_base, on: pedestrian_network);
		}
    		
    		
    		
    	}
    	//disposing of trash
    	if has_trash and trash_on_hand >= minimum_trash_level_to_throw and current_target = target_bin.location{
    		
    		if self.location distance_to target_bin.location < 0.1 {
	  			target_bin.current_capacity <- (target_bin.current_capacity + trash_on_hand); 
	            has_trash <- false;
	            trash_on_hand <- 0.0;
	            current_target <- home_base;
//	            write name + " has reached the bin!";
	        }
	    //walking to bin
        else{
            do goto (target: target_bin.location, on: pedestrian_network);
            
		}
     }
     
     
    	
    		
    }
    	
    
    aspect default {
		draw ("Trash on hand:") color:#black size:displayTextSize at:{location.x-2,location.y+displayTextSize} perspective:false; 
		draw (string(round(trash_on_hand*100)/100)) color:#black size:displayTextSize at:{location.x+1,location.y+displayTextSize*1.5} perspective:false; 
    	
        if display_circle_min_dist and minimal_distance > 0 {
            draw circle(minimal_distance).contour color: color;
        }
        
        draw triangle(2) color: color rotate: heading + 90.0 depth: 0.5;
        
        if (current_path != nil) {
			draw current_path.shape color: #red;
		}
        
        if display_target and current_waypoint != nil {
            draw line([location, current_waypoint]) color: color;
        }
        
        if display_force {
            loop op over: forces.keys {
                if (species(agent(op)) = obstacle) {
                    draw line([location, location + point(forces[op])]) color: #red end_arrow: 0.1;
                } else if ((agent(op)) = self) {
                    draw line([location, location + point(forces[op])]) color: #blue end_arrow: 0.1;
                } else {
                    draw line([location, location + point(forces[op])]) color: #green end_arrow: 0.1;
                }
            }
        }
    }
}



experiment pedestrian_navigation type: gui {
    float minimum_cycle_duration <- 0.1;
    output {
        display map type: 3d {
            species obstacle;
            species pedestrian_path transparency: 0.5;
            species bin aspect: default;
            species people aspect: default;
            species cleaner aspect: default;
            species central_bin aspect: default;
            
        }
   
    	display "my_display" {
	   		chart "my_chart" type: series {
				datalist people collect (each.name) value:  people collect (each.trash_on_hand) color: people collect (each.color) marker: false style: spline thickness:2 ;
		    }
		}
	}
}