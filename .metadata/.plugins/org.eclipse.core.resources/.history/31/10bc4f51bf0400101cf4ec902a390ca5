/**
* Name: NHPP
* Based on the internal empty template. 
* Author: valencia
* Tags: 
*/


model NHPP

/* Insert your model definition here */

global{
    float lambda_max <- 12;  //Peak intensity approximation
    float T <- 24;           //Full day duration
    float interval <- 1;      //Time interval for expected counts
	list expected_counts;
	list actual_counts;
	list time_intervals;
	
    
    init {
    	create NHPP_function{
    		base_rate <- 1;  //Minimum production rate
		    peak1 <- 10;     //Lunch peak
		    peak2 <- 8;     //Dinner peak
		    peak3 <- 6;      //Closing peak
    	}
    }
    
}
    
species NHPP_function {
	int base_rate;
	int peak1;
	int peak2;
	int peak3;
	int t <- 0;
	list<float> events <- [];       //To store events
	float u;
	
	float intensity <- base_rate;
	
	float num_events;
	float mean_events;
	float var_events;
	
	list expected_counts;
	list actual_counts;
	list<integer> time_interval;
	
	
	action lambda_t t:t{
		intensity <- intensity + peak1 * exp(-((t - 12) / 2) ^ 2); //lunch at 12pm
		intensity <- intensity + peak2 * exp(-((t - 22) / 2) ^ 2); // Dinner peak at 6 PM
	    intensity <- intensity + peak3 * exp(-((t - 18) / 2) ^ 2); // Closing peak at 10 PM
	    
	    write "Intensity is: " + intensity;
    	return intensity;
    
    }
    
    
    
    action generate_nhpp T: T lambda_max: lambda_max{
    	loop while: (t < T) {
    		u <- rnd;
    		t <- t - (log(u)/lambda_max);
    		condition <- lambda_t(t)/lambda_max;
    		if (t<T and u<condition){
    			events <- events + t;
    		}
    	
    	}
    	num_events <- round(length(events)*100)/100;
    	mean_events <- round(mean(events)*100)/100;
    	var_events <- round(variance(events)*100)/100;
    	write "Generated NHPP Count: " + num_events;
    	write "Generated NHPP Mean: " + mean_events + ", Variance : " + var_events;
    	return events;
    }
    
    reflex generate_trash {
    	do generate_nhpp;
    }
    
//    reflex 
    

}




//
//
////Define the lambda_t function that models trash production
//species lambda_t{
//    float peak1;
//    float peak2;
//    float peak3;
//    float base_rate;
//    float intensity;
//
//
//    action calculate_intensity(float t) -> float:
//        //Trash production model with peaks at lunch, dinner, and closing time
//        var intensity <- base_rate
//        intensity += peak1 * exp(-((t - 20) / 2) ^ 2);  # Lunch peak at 12 PM
//        intensity += peak2 * exp(-((t - 10) / 2) ^ 2);  # Dinner peak at 6 PM
//        intensity += peak3 * exp(-((t - 16) / 2) ^ 2);  # Closing peak at 10 PM
//        return intensity;
//        
//        }
//
////Function to generate a Non-Homogeneous Poisson Process (NHPP)
//species generate_nhp{
//    list events;
//    float t, u;
//
//    init:
//        events <- [];
//        t <- 0;
//
//    action generate_events():
//        while (t < T):
//            u <- uniform(0, 1);
//            t <- -log(u) / lambda_max;  # Generate candidate arrival time
//            
//            if (t < T and uniform(0, 1) < (lambda_t.calculate_intensity(t) / lambda_max)):
//                events.push(t);  # Accept the event
//
//
//}
//
////Initialize the NHPP generation
//species nhpp_events:
//    list events;
//    
//    action init:
//        generate_nhpp.generate_events();
//        events <- generate_nhpp.events;

# Collect statistics and plot the results
species statistics:
    list expected_counts, actual_counts, time_intervals;
    float integral, actual;

    action calculate_statistics():
        time_intervals <- [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22];  # Time intervals in hours
        expected_counts <- [];
        actual_counts <- [];

        # Compute the expected counts and actual counts for each interval
        foreach s in time_intervals:
            integral <- integrate(lambda_t.calculate_intensity, s, s + interval);  # Numerical integration
            expected_counts.push(integral);
            actual <- count(lambda_t | (lambda_t >= s and lambda_t < s + interval));
            actual_counts.push(actual);

        # Print comparison of expected vs actual counts
        foreach s, idx in time_intervals:
            print("Interval [", s, ", ", s + interval, "]: Expected = ", expected_counts[idx], ", Actual = ", actual_counts[idx]);

# Visualization (for testing purposes)
species visualization:
    action plot_graph():
        list times <- [];
        list intensities <- [];
        
        foreach t in range(0, T, 0.001):
            times.push(t);
            intensities.push(lambda_t.calculate_intensity(t));

        plot(times, intensities, "Intensity Function", "Time (hours)", "Lambda(t) (Trash Production Rate)");
        vlines(events, 0, lambda_max, color='red');
        legend(["Intensity Function", "NHPP Events"]);
        title("Non-Homogeneous Poisson Process - Trash Production");

# Run the simulation
init:
    nhpp_events.init;
    statistics.calculate_statistics;
    visualization.plot_graph;
