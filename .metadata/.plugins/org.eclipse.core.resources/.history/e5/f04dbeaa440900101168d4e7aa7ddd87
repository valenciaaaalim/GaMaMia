/**
* Name: NHPPclaude2
* Based on the internal empty template. 
* Author: valencia
* Tags: 
*/


model NHPPclaude2

/* Insert your model definition here */

/**
* Name: NHPP_Model
* A model implementing non-homogeneous Poisson process for trash generation
*/


global {
    float step <- 1.0; 
    float lambda_max <- 12.0; // max intensity value for NHPP (aka 12 units of trash max)
    float T <- 24.0; // set to 24 hours, total time for process to run
    float interval <- 1.0; // set to 1 hour interval of production

    init {
        create NHPP_function;
    }
}

species NHPP_function {
    float base_rate <- 1.0; //min background intensity for NHPP
    
    // amplitudes of peaks in intensity fn at diff times
    float peak1 <- 10.0; 
    float peak2 <- 8.0;
    float peak3 <- 6.0;

    list<float> events <- []; // store time stamps of NHPP-generated events
    // by logic this would be a whole number interval, rep hour
    
    list<float> intensity_values <- []; // stores intensity fn values for visualisation
    
    
    // Calculate intensity at time t using Gaussian function e^x
    float lambda_t (float argt) {
        float intensity <- base_rate; // starts at base rate 1.0
        intensity <- intensity + peak1 * exp(-((argt - 12.0) / 2.0)^2);
        intensity <- intensity + peak2 * exp(-((argt - 18.0) / 2.0)^2);
        intensity <- intensity + peak3 * exp(-((argt - 22.0) / 2.0)^2);
        // peaks occur at 12, 18 and 22 hours rep lunch, dinner, close up time
        return intensity;
    }
    
    // Generate non-homogeneous Poisson process events up to time T (24th hour)
    action generate_nhpp (float argT, float amplitude) {
        float t <- 0.0; // start at 12am, t=0
        list<float> new_events <- []; // store the generated event times
        
        // inverse transform sampling
        loop while: (t < argT) {
            float u1 <- rnd(0.0, 1.0); // rndm number u1 is drawn from U[0,1]
            // next event time is computed following poisson process interarrival time formula
            t <- t - log(u1) / amplitude; 
            
            // if the new time t is within the toal simulation time 24h, acceptance probability is:
            if (t < argT) {
            	
                float acceptance_prob <- lambda_t(t) / amplitude;
                // probability calculated is intensity / amplitude of that random time t
                // the higher the intensity, the higher the probability of event of trash production happening
                // intensity is higher during peak hours thus during peak hours, more events of trash pdtn
                if (rnd(0.0, 1.0) <= acceptance_prob) { // event is accepted if rndm number drawn is within the probabiltiy threshold
                    new_events <- new_events + t;
                    write "Amount of trash generated is: " + lambda_t(t) + " at hour " + int(cycle) mod 24;
                    
                }
            }
        }
        
        events <- new_events; // store gen event times
        write "Total trash events on day " + int(cycle/24) + ": " + length(events); 
        // output total number of events every 24h
        
        return events;
    }
    
    // Compute intensity function values for plotting
    action compute_intensity_function {
        intensity_values <- [];
        
        loop i from: 0.0 to: T step: 0.5 { //compute intensity fn every 0.5h
            intensity_values <- intensity_values + lambda_t(i);
        }
       
        return intensity_values;
        
    }
    
    // Trigger NHPP event generation while t < T
    reflex generate_trash when: (cycle = 0) or every(24 * #cycle) {
        do generate_nhpp(T, lambda_max);
        do compute_intensity_function();
    }
}

experiment "Non-Homogeneous Poisson" type: gui {
    output {
        display "NHPP Visualization" type: 2d {
            chart "Intensity Function and Events" type: series {
                data "Lambda(t)" value: first(NHPP_function).intensity_values color: #blue style: line;
                }
            chart "event" type: scatter{         
                data "Events" value: first(NHPP_function).events color: #red 
                      marker: true marker_size: 2.0;
            }
            }
        }
    }
