/**
* Name: TenMarch
* Based on the internal empty template. 
* Author: valencia
* Tags: 
*/


model TenMarch

/* Insert your model definition here */

/*
> Jay and Val GAMA Experimentation (Until WED MORNING) -- 1 FLOOR
> > Import and make shape file
> > See this file is interactable and able to visualise the bin, tenant locations
> > Algorithm to move on a route
 
 */
 
 
global {
	//number of obstacles
	int nb_obstacles <- 20 parameter: true;
	
	//perception distance
	float perception_distance <- 40.0 parameter: true;
	
	//precision used for the masked_by operator (default value: 120): the higher the most accurate the perception will be, but it will require more computation
	int precision <- 600 parameter: true;
	
	//space where the agent can move.
	geometry free_space <- copy(shape);
	
	list<obstacle> obstacle_species;
	
	
	float P_obstacle_consideration_distance <- 3.0 parameter: true ;
	
	init {
		create obstacle number:nb_obstacles {
			shape <- rectangle(2+rnd(20), 2+rnd(20));
			free_space <- free_space - obstacle;
			
		}
		
		create people  {
			location <- any_location_in(free_space);
			obstacle_consideration_distance <-P_obstacle_consideration_distance;
			obstacle_species<-[obstacle];
		}
		
		create bin {
			location <- any_location_in(free_space);
		}
	}
}


species obstacle {
	aspect default {
		draw shape color: #gray border: #black;
	}
}
species people skills: [moving,pedestrian]{
	bool has_trash <- true; 
	
	//zone of perception
	geometry perceived_area;
	
	//the target it wants to reach
	bin target ;
	list<obstacle> obstacle_species;
	
	
    reflex search_target when: target = nil{
    	ask bin {
    		myself.target <- self;
    	}
    		if (perceived_area = nil) or (perceived_area.area < 2.0) {
				//if the agent has no target and if the perceived area is empty (or too small), it moves randomly inside the free_space
				do wander bounds: free_space;
			} 
    }
    
    reflex follow when: target!=nil {
		speed <- 0.8;
		do goto target: target;
		has_trash <- false;
    }
    
    reflex stay when: has_trash = false{}
    

	
	
	//computation of the perceived area
	reflex update_perception {
		//the agent perceived a cone (with an amplitude of 60Â°) at a distance of  perception_distance (the intersection with the world shape is just to limit the perception to the world)
		perceived_area <- (cone(heading-30,heading+30) intersection world.shape) intersection circle(perception_distance); 
		
		//if the perceived area is not nil, we use the masked_by operator to compute the visible area from the perceived area according to the obstacles
		if (perceived_area != nil) {
			perceived_area <- perceived_area masked_by (obstacle,precision);

		}
	}
	
	aspect body {
		draw triangle(2) rotate:90 + heading color: #red;
		if (target!=nil) {
	    draw polyline([self.location,target.location]) color:#black;
	}
	}
	aspect perception {
		if (perceived_area != nil) {
			draw perceived_area color: #green;
			draw circle(1) at: target.location color: #magenta;
			
		}
	}
}

species bin {    
    aspect base {
        draw square(3) color: #blue depth:3 ;
        
    }
}

experiment fieldofvision type: gui {
	float minimum_cycle_duration <- 0.05;
	output synchronized: true {
		display view{
			species obstacle;
			species people aspect: perception transparency: 0.5;
			species people aspect: body;
			species bin aspect: base;
		}
	}
}
 