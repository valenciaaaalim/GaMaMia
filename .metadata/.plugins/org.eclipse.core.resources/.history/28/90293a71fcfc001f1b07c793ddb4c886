/**
* Name: rat
* Based on the internal empty template. 
* Author: valencia
* Tags: 
*/


model rat

/* Insert your model definition here */

/**
 * Building Structure with Rat Infection Simulation
 * Multi-floor building with rooms and rats spreading disease
 */

global {
    // Environment and simulation parameters
    int nb_rats <- 50;
    float infection_distance <- 2.0;
    float infection_rate <- 0.3;
    float mutation_rate <- 0.005;  // Rate at which infection becomes more virulent
    float floor_height <- 5.0;
    int nb_floors <- 3;
    int nb_rooms_per_floor <- 6;
    
    // Building dimensions
    int building_width <- 50;
    int building_height <- 50;
    int wall_thickness <- 1;
    
    // Room dimensions (automatically calculated)
    int room_width <- building_width div 3;
    int room_height <- building_height div 2;
    
    // Track infection severity
    float current_infection_severity <- 1.0;
    
    // Store all rooms for reference
    list<Room> all_rooms;
    
    init {
        // Create the building structure
        create Building number: 1 {
            width <- building_width;
            height <- building_height;
            nb_of_floors <- nb_floors;
        }
        
        // Create rooms on each floor
        loop floor from: 0 to: nb_floors - 1 {
            float floor_z <- floor * floor_height;
            
            // Create a grid of 3x2 rooms
            loop i from: 0 to: 2 {
                loop j from: 0 to: 1 {
                    create Room {
                        location <- {i * room_width + room_width/2, j * room_height + room_height/2, floor_z};
                        floor_number <- floor;
                        room_id <- length(all_rooms);
                        left <- i * room_width;
                        right <- (i+1) * room_width;
                        bottom <- j * room_height;
                        top <- (j+1) * room_height;
                        
                        // Create doorways between adjacent rooms
                        has_left_door <- i > 0;
                        has_right_door <- i < 2;
                        has_top_door <- j < 1;
                        has_bottom_door <- j > 0;
                        
                        // Add to global list
                        add self to: all_rooms;
                    }
                }
            }
            
            // Create a stairway connecting floors
            if (floor < nb_floors - 1) {
                create Stairway {
                    location <- {building_width - 5, building_height - 5, floor_z + floor_height/2};
                    connects_floor <- floor;
                    to_floor <- floor + 1;
                }
            }
        }
        
        // Create rats (some infected)
        create Rat number: nb_rats {
            Room start_room <- one_of(all_rooms);
            location <- {rnd(start_room.left, start_room.right), 
                         rnd(start_room.bottom, start_room.top), 
                         start_room.location.z};
            current_room <- start_room;
            is_infected <- flip(0.1);  // 10% initially infected
            if (is_infected) {
                infection_severity <- 1.0;
            }
        }
    }
    
    // Update infection severity over time
    reflex update_infection_severity {
        if (Rat count (each.is_infected) > 0) {
            float max_severity <- max(Rat where each.is_infected collect each.infection_severity);
            if (flip(mutation_rate)) {
                current_infection_severity <- min(10.0, max_severity + 0.5);
                write "Day " + cycle + ": Disease mutation! Severity increased to " + current_infection_severity;
            }
        }
    }
    
    // Track statistics
    reflex update_statistics {
        int total_infected <- Rat count (each.is_infected);
        write "Day " + cycle + ": " + total_infected + " infected rats out of " + nb_rats + 
              " (Avg. severity: " + mean(Rat where each.is_infected collect each.infection_severity) + ")";
    }
}

// Building species - the overall structure
species Building {
    int width;
    int height;
    int nb_of_floors;
    
    aspect default {
        // Draw building outline
        rgb facade_color <- rgb(220, 220, 220);
        draw box({width, height, nb_of_floors * floor_height}) at: {width/2, height/2, (nb_of_floors * floor_height)/2} 
             color: facade_color depth: 0.1;
    }
}

// Room species - individual rooms within the building
species Room {
    int floor_number;
    int room_id;
    float left;
    float right;
    float bottom;
    float top;
    
    // Doorways
    bool has_left_door;
    bool has_right_door;
    bool has_top_door;
    bool has_bottom_door;
    
    // Door positions (calculated)
    point left_door_pos -> {left, (bottom+top)/2, location.z};
    point right_door_pos -> {right, (bottom+top)/2, location.z};
    point top_door_pos -> {(left+right)/2, top, location.z};
    point bottom_door_pos -> {(left+right)/2, bottom, location.z};
    
    // Get adjacent rooms
    list<Room> get_connected_rooms {
        list<Room> connected <- [];
        if (has_left_door) {
            Room left_room <- Room first_with (each.floor_number = floor_number and each.right = left);
            if (left_room != nil) { add left_room to: connected; }
        }
        if (has_right_door) {
            Room right_room <- Room first_with (each.floor_number = floor_number and each.left = right);
            if (right_room != nil) { add right_room to: connected; }
        }
        if (has_top_door) {
            Room top_room <- Room first_with (each.floor_number = floor_number and each.bottom = top);
            if (top_room != nil) { add top_room to: connected; }
        }
        if (has_bottom_door) {
            Room bottom_room <- Room first_with (each.floor_number = floor_number and each.top = bottom);
            if (bottom_room != nil) { add bottom_room to: connected; }
        }
        
        // Add stairway connections
        ask Stairway {
            if (self.connects_floor = myself.floor_number) {
                Room target_room <- Room closest_to {myself.location.x, myself.location.y, (self.to_floor * floor_height)};
                if (target_room != nil) { add target_room to: connected; }
            }
        }
        
        return connected;
    }
    
    aspect default {
        // Room floor
        draw rectangle({right-left, top-bottom}) at: {(left+right)/2, (bottom+top)/2, location.z-0.1} 
             color: rgb(240, 240, 240);
        
        // Room walls (omitting doorways)
        rgb wall_color <- rgb(150, 150, 150);
        float wall_height <- floor_height * 0.9;
        
        // Left wall (with possible door gap)
        if (!has_left_door) {
            draw line([{left, bottom, location.z}, {left, top, location.z}], wall_height) color: wall_color;
        } else {
            float door_size <- (top-bottom)/4;
            draw line([{left, bottom, location.z}, {left, (bottom+top)/2 - door_size, location.z}], wall_height) color: wall_color;
            draw line([{left, (bottom+top)/4 + door_size, location.z}, {left, top, location.z}], wall_height) color: wall_color;
        }
        
        // Right wall (with possible door gap)
        if (!has_right_door) {
            draw line([{right, bottom, location.z}, {right, top, location.z}], wall_height) color: wall_color;
        } else {
            float door_size <- (top-bottom)/4;
            draw line([{right, bottom, location.z}, {right, (bottom+top)/2 - door_size, location.z}], wall_height) color: wall_color;
            draw line([{right, (bottom+top)/2 + door_size, location.z}, {right, top, location.z}], wall_height) color: wall_color;
        }
        
        // Bottom wall (with possible door gap)
        if (!has_bottom_door) {
            draw line([{left, bottom, location.z}, {right, bottom, location.z}], wall_height) color: wall_color;
        } else {
            float door_size <- (right-left)/4;
            draw line([{left, bottom, location.z}, {(left+right)/2 - door_size, bottom, location.z}], wall_height) color: wall_color;
            draw line([{(left+right)/2 + door_size, bottom, location.z}, {right, bottom, location.z}], wall_height) color: wall_color;
        }
        
        // Top wall (with possible door gap)
        if (!has_top_door) {
            draw line([{left, top, location.z}, {right, top, location.z}], wall_height) color: wall_color;
        } else {
            float door_size <- (right-left)/4;
            draw line([{left, top, location.z}, {(left+right)/2 - door_size, top, location.z}], wall_height) color: wall_color;
            draw line([{(left+right)/2 + door_size, top, location.z}, {right, top, location.z}], wall_height) color: wall_color;
        }
        
        // Room label
        draw string("Room " + room_id) at: {(left+right)/2, (bottom+top)/2, location.z} color: #black font: font("SansSerif", 12, #plain);
    }
}

// Stairways between floors
species Stairway {
    int connects_floor;
    int to_floor;
    
    aspect default {
        rgb stair_color <- rgb(100, 100, 150);
        float stair_size <- 3.0;
        
        draw cylinder(stair_size/2, floor_height) color: stair_color;
        draw sphere(stair_size/2) at: {location.x, location.y, location.z + floor_height/2} color: stair_color;
        
        // Label
        draw string("Stairs " + connects_floor + "->" + to_floor) at: {location.x, location.y, location.z + 1} 
             color: #white font: font("SansSerif", 10, #bold);
    }
}

// Rat species - carries and spreads infection
species Rat skills: [moving] {
    bool is_infected <- false;
    float infection_severity <- 0.0;
    Room current_room;
    float size <- 0.5;
    float speed <- 0.8;
    float wander_probability <- 0.02;  // Chance to change rooms each step
    
    reflex move {
        // Random movement within current room
        if (current_room != nil) {
            float new_x <- rnd(current_room.left + size, current_room.right - size);
            float new_y <- rnd(current_room.bottom + size, current_room.top - size);
            location <- {new_x, new_y, current_room.location.z};
        }
        
        // Occasionally move to another room
        if (flip(wander_probability) and current_room != nil) {
            list<Room> connected_rooms <- current_room.get_connected_rooms();
            if (!empty(connected_rooms)) {
                current_room <- one_of(connected_rooms);
                location <- {rnd(current_room.left + size, current_room.right - size), 
                             rnd(current_room.bottom + size, current_room.top - size), 
                             current_room.location.z};
            }
        }
    }
    
    reflex infect when: is_infected {
        // Try to infect nearby rats in the same room
        ask Rat at_distance infection_distance {
            if (!is_infected and self.current_room = myself.current_room) {
                // Higher severity increases infection chance
                float actual_infection_rate <- infection_rate * myself.infection_severity / 2;
                if (flip(min(0.9, actual_infection_rate))) {
                    is_infected <- true;
                    // New infections start at current severity level
                    infection_severity <- myself.infection_severity;
                }
            }
        }
        
        // Infection severity might increase
        if (flip(mutation_rate/5)) {
            infection_severity <- min(10.0, infection_severity + 0.2);
        }
    }
    
    aspect default {
        // Change color based on infection status and severity
        rgb rat_color <- is_infected ? rgb(200 + min(55, infection_severity * 5), 0, 0) : rgb(150, 150, 150);
        
        // Draw as a sphere with size proportional to infection severity
        float display_size <- is_infected ? size * (1 + infection_severity/10) : size;
        draw sphere(display_size) color: rat_color;
    }
}

experiment RatInfectionSimulation type: gui {
    parameter "Number of Rats:" var: nb_rats min: 10 max: 200;
    parameter "Initial Infection Rate:" var: infection_rate min: 0.1 max: 0.9;
    parameter "Mutation Rate:" var: mutation_rate min: 0.0 max: 0.05;
    
    output {
        display main_display type: opengl {
            // Building structure
            species Building;
            species Room;
            species Stairway;
            
            // Rats
            species Rat;
            
            // Camera settings
            camera 'default' location: {building_width * 1.5, building_height * 1.5, building_width} 
                   target: {building_width/2, building_height/2, floor_height};
            
            // Add information about the simulation
            graphics "info" {
                draw "Infected Rats: " + (Rat count (each.is_infected)) at: {5, 5, nb_floors * floor_height + 5} 
                     color: #red font: font("SansSerif", 16, #bold);
                draw "Healthy Rats: " + (Rat count (!each.is_infected)) at: {5, 10, nb_floors * floor_height + 5} 
                     color: #green font: font("SansSerif", 16, #bold);
                draw "Current Infection Severity: " + current_infection_severity at: {5, 15, nb_floors * floor_height + 5} 
                     color: #orange font: font("SansSerif", 16, #bold);
            }
        }
        
        // Add charts to track the infection
        display "Disease_Chart" {
            chart "Rat Infection Spread" type: series {
                data "Infected Rats" value: Rat count (each.is_infected) color: #red;
                data "Healthy Rats" value: Rat count (!each.is_infected) color: #green;
                data "Infection Severity (x10)" value: current_infection_severity * 5 color: #orange;
            }
        }
        
        // Floor-by-floor infection rates
        display "Floor_Statistics" {
            chart "Infection by Floor" type: histogram {
                loop floor from: 0 to: nb_floors - 1 {
                    data "Floor " + floor 
                         value: (Rat count (each.is_infected and each.current_room != nil and each.current_room.floor_number = floor)) 
                         color: rgb(200, floor * 40, 50);
                }
            }
        }
    }
}